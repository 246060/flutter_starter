# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  language:
    strict-casts: true
    strict-raw-types: true
    strict-inference: true
  errors:
    avoid_print: error
    sort_pub_dependencies: error
    depend_on_referenced_packages: error
    void_checks: error
    use_to_and_as_if_applicable: error
    use_test_throws_matchers: error
    invalid_annotation_target: ignore
    implementation_imports: ignore
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"

linter:

  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    #- sort_pub_dependencies
    - depend_on_referenced_packages
    - void_checks
    - use_to_and_as_if_applicable
    - use_test_throws_matchers
    - use_string_buffers
    - use_setters_to_change_properties
    - use_rethrow_when_possible
    - use_raw_strings
    - use_named_constants
    - use_is_even_rather_than_modulo
    - use_if_null_to_convert_nulls_to_bools
    - use_enums
    - use_decorated_box
    - use_colored_box
    - unnecessary_to_list_in_spreads
    - unnecessary_raw_strings
    - unnecessary_parenthesis
    - unnecessary_lambdas
    - unnecessary_await_in_return
    - unawaited_futures
    - type_annotate_public_apis
    - sort_unnamed_constructors_first
    - sort_constructors_first
    - sized_box_shrink_expand
    - require_trailing_commas
    - prefer_null_aware_method_calls
    - prefer_mixin
    - prefer_constructors_over_static_methods
    - flutter_style_todos
    - implicit_call_tearoffs
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - missing_whitespace_between_adjacent_strings
    - no_runtimeType_toString
    - omit_local_variable_types
    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - parameter_assignments
    - prefer_asserts_with_message
    - prefer_expression_function_bodies
    - prefer_final_in_for_each
    - prefer_final_locals
    - avoid_final_parameters
    - prefer_if_elements_to_conditional_expressions
    - lines_longer_than_80_chars
    - eol_at_end_of_file
    - directives_ordering
    - deprecated_consistency
    - combinators_ordering
    - cast_nullable_to_non_nullable
    - avoid_void_async
    - avoid_unused_constructor_parameters
    - avoid_returning_this
    - avoid_escaping_inner_quotes
    - avoid_double_and_int_checks
    - avoid_catching_errors
    #- avoid_catches_without_on_clauses
    - avoid_bool_literals_in_conditional_expressions
    - cancel_subscriptions
    - close_sinks
    - avoid_dynamic_calls
    #- always_use_package_imports
    - prefer_relative_imports
    - avoid_type_to_string
    - no_adjacent_strings_in_list
    - avoid_multiple_declarations_per_line
    - unnecessary_statements
    - avoid_field_initializers_in_const_classes
    - throw_in_finally
    - always_put_required_named_parameters_first
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - literal_only_boolean_expressions
    - discarded_futures
    - avoid_positional_boolean_parameters
    - comment_references
    - cascade_invocations
    - collection_methods_unrelated_type
    - avoid_equals_and_hash_code_on_mutable_classes
    - test_types_in_equals
    #- avoid_private_typedef_functions
    #- always_specify_types
    #- avoid_classes_with_only_static_members
    #- avoid_implementing_value_types
    #    - prefer_double_quotes
    - prefer_single_quotes
    #- implementation_imports


# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
